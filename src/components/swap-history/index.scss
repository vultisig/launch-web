@use "~variables" as *;

.swap-history {
  display: flex;
  flex-direction: column;
  gap: rem(12);

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .button {
    cursor: pointer;
    display: block;

    svg {
      stroke: $text-primary;
      transition: all 0.2s;
      height: rem(16);
      width: rem(16);
    }

    &:hover {
      svg {
        stroke: $alert-error;
      }
    }
  }

  .ant-spin {
    .ant-spin-dot-item {
      background-color: $alert-warning;
    }
  }

  .heading {
    font-weight: 600;
    font-size: rem(16);
  }

  .middle-truncate {
    color: $text-primary;

    &:hover {
      color: $text-light;
    }
  }

  .action {
    display: flex;
    flex-direction: column;
    gap: rem(8);

    .label {
      font-size: rem(16);
      font-weight: 500;
      line-height: rem(22);
    }

    .time {
      font-size: rem(16);
      line-height: rem(22);
    }
  }

  .token {
    display: flex;
    flex-direction: column;
    gap: rem(4);
    padding-left: rem(44);
    position: relative;

    .logo {
      height: rem(36);
      left: 0;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      width: rem(36);
    }

    .ticker {
      font-weight: 500;
    }

    .value {
      font-weight: 600;
    }

    .minus {
      color: $alert-error;
    }

    .plus {
      color: $button-primary;
    }
  }

  .swap {
    align-items: center;
    display: flex;
    justify-content: space-between;
    gap: rem(24);
  }

  .btn {
    align-items: center;
    border-radius: rem(16);
    display: flex;
    height: rem(34);
    gap: rem(8);
    justify-content: center;
    position: absolute;
    right: 0;
    top: rem(9);
    width: rem(120);

    svg {
      height: rem(16);
      width: rem(16);
    }

    &.failed {
      background-color: rgba($color: $alert-error, $alpha: 0.2);
      color: $alert-error;

      svg {
        stroke: $alert-error;
      }
    }

    &.pending {
      background-color: rgba($color: $alert-warning, $alpha: 0.2);
      color: $alert-warning;

      svg {
        stroke: $alert-warning;
      }
    }

    &.success {
      background-color: rgba($color: $alert-success, $alpha: 0.2);
      color: $alert-success;

      svg {
        stroke: $alert-success;
      }
    }
  }

  .item {
    display: flex;
    flex-direction: column;
    gap: rem(12);
    position: relative;

    + .item {
      border-top: solid rem(1) $border-normal;
      padding-top: rem(12);

      .btn {
        top: rem(21);
      }
    }
  }
}

@media (min-width: rem(1400)) {
  .swap-history {
    gap: rem(16);

    .heading {
      font-size: rem(20);
    }

    .middle-truncate {
      flex: 1;
    }

    .btn {
      position: static;
    }

    .item {
      align-items: center;
      flex-direction: row;
      gap: rem(32);
      justify-content: space-between;

      + .item {
        padding-top: rem(16);
      }
    }
  }
}
